package com.diozero.internal.provider.builtin.gpio;

/*-
 * #%L
 * Organisation: diozero
 * Project:      diozero - Core
 * Filename:     GpioChipOpenTest.java
 * 
 * This file is part of the diozero project. More information about this project
 * can be found at https://www.diozero.com/.
 * %%
 * Copyright (C) 2016 - 2024 diozero
 * %%
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * #L%
 */

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

@SuppressWarnings("static-method")
public class GpioChipOpenTest {
	@Test
	public void test() throws IOException {
		Map<Integer, GpioChipTest> chips = Files.list(Paths.get("src/test/resources/dev"))
				.filter(p -> p.getFileName().toString().startsWith("gpiochip"))
				.map(p -> GpioChipOpenTest.openChip(p.toString())) //
				.collect(Collectors.toMap(GpioChipTest::getChipId, Function.identity()));
		Assertions.assertNotNull(chips);
		Assertions.assertEquals(2, chips.size());
	}

	private static GpioChipTest openChip(String deviceFilename) {
		return new GpioChipTest(Integer.parseInt(deviceFilename.substring(deviceFilename.length() - 1)));
	}

	public static class GpioChipTest {
		private int chipId;

		public GpioChipTest(int chipId) {
			this.chipId = chipId;
		}

		public int getChipId() {
			return chipId;
		}
	}
}
