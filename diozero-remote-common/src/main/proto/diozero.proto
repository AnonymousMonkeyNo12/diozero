syntax = "proto3";

option java_multiple_files = false;
option java_package = "com.diozero.remote.message.protobuf";
option java_outer_classname = "DiozeroProtos";

package diozero;

/*
service GpioControl {
  rpc GetBoardInfo (Gpio.GetBoardInfoRequest) returns (Gpio.GetBoardInfoResponse) {}
  rpc ProvisionDigitalInputDevice (Gpio.ProvisionDigitalInputDeviceRequest) returns (Response) {}
  rpc ProvisionDigitalOutputDevice (Gpio.ProvisionDigitalOutputDeviceRequest) returns (Response) {}
  rpc ProvisionDigitalInputOutputDevice (Gpio.ProvisionDigitalInputOutputDeviceRequest) returns (Response) {}
  rpc ProvisionDigitalPwmDevice (Gpio.ProvisionDigitalPwmDeviceRequest) returns (Response) {}
  rpc ProvisionAnalogInputDevice (Gpio.ProvisionAnalogInputDeviceRequest) returns (Response) {}
  rpc ProvisionAnalogOutputDevice (Gpio.ProvisionAnalogOutputDeviceRequest) returns (Response) {}
  rpc DigitalRead (Gpio.DigitalReadRequest) returns (Gpio.DigitalReadResponse) {}
  rpc DigitalWrite (Gpio.DigitalWriteRequest) returns (Response) {}
  rpc PwmRead (Gpio.PwmReadRequest) returns (Gpio.PwmReadResponse) {}
  rpc PwmWrite (Gpio.PwmWriteRequest) returns (Response) {}
  rpc AnalogRead (Gpio.AnalogReadRequest) returns (Gpio.AnalogReadResponse) {}
  rpc AnalogWrite (Gpio.AnalogWriteRequest) returns (Response) {}
  rpc Events (Gpio.EventsRequest) returns (Response) {}
  rpc Close (Gpio.CloseRequest) returns (Response) {}
}

service I2CControl {
	rpc Open (I2C.OpenRequest) returns (I2C.OpenResponse) {}
}
*/

enum Status {
	OK = 0;
	ERROR = 1;
}

message MessageWrapper {
	string type = 1;
	bytes message = 2;
}

message Response {
	string correlationId = 1;
	Status status = 2;
	string detail = 3;
}

message Gpio {
	enum PullUpDown {
		PUD_NONE = 0;
		PUD_PULL_UP = 1;
		PUD_PULL_DOWN = 2;
	}
	
	enum Trigger {
		TRIGGER_NONE = 0;
		TRIGGER_RISING = 1;
		TRIGGER_FALLING = 2;
		TRIGGER_BOTH = 3;
	}
	
	enum GpioMode {
		DIGITAL_INPUT = 0;
		DIGITAL_OUTPUT = 1;
		PWM_OUTPUT = 2;
		ANALOG_INPUT = 3;
		ANALOG_OUTPUT = 4;
		UNKNOWN = 5;
	}
	
	message GpioInfo {
		int32 gpio = 1;
		repeated GpioMode mode = 2;
	}
	
	message GetBoardInfoRequest {
		string correlationId = 1;
	}
	
	message GetBoardInfoResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		string make = 4;
		string model = 5;
		int32 memory = 6;
		repeated GpioInfo gpioInfo = 7;
	}
	
	message ProvisionDigitalInputRequest {
		string correlationId = 1;
		int32 gpio = 2;
		PullUpDown pud = 3;
		Trigger trigger = 4;
	}
	
	message ProvisionDigitalOutputRequest {
		string correlationId = 1;
		int32 gpio = 2;
		bool initialValue = 3;
	}
	
	message ProvisionDigitalInputOutputRequest {
		string correlationId = 1;
		int32 gpio = 2;
		bool output = 3;
	}
	
	message ProvisionPwmOutputRequest {
		string correlationId = 1;
		int32 gpio = 2;
		int32 frequency = 3;
		float initialValue = 4;
	}
	
	message ProvisionAnalogInputRequest {
		string correlationId = 1;
		int32 gpio = 2;
	}
	
	message ProvisionAnalogOutputRequest {
		string correlationId = 1;
		int32 gpio = 2;
		float initialValue = 3;
	}
	
	message DigitalReadRequest {
		string correlationId = 1;
		int32 gpio = 2;
	}
	
	message DigitalWriteRequest {
		string correlationId = 1;
		int32 gpio = 2;
		bool value = 3;
	}
	
	message PwmReadRequest {
		string correlationId = 1;
		int32 gpio = 2;
	}
	
	message PwmWriteRequest {
		string correlationId = 1;
		int32 gpio = 2;
		float value = 3;
	}
	
	message AnalogReadRequest {
		string correlationId = 1;
		int32 gpio = 2;
	}
	
	message AnalogWriteRequest {
		string correlationId = 1;
		int32 gpio = 2;
		float value = 3;
	}
	
	message EventsRequest {
		string correlationId = 1;
		int32 gpio = 2;
		bool enabled = 3;
	}
	
	message CloseRequest {
		string correlationId = 1;
		int32 gpio = 2;
	}
	
	message DigitalReadResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		bool value = 4;
	}
	
	message PwmReadResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		float value = 4;
	}
	
	message AnalogReadResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		float value = 4;
	}
	
	message Notification {
		int32 gpio = 1;
		int64 epochTime = 2;
		bool value = 3;
	}
}

message I2C {
	message OpenRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
		int32 addressSize = 4;
		int32 clockFrequency = 5;
	}
	
	message ReadByteRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
	}
	
	message WriteByteRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
		int32 data = 4;
	}
	
	message ReadRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
		int32 length = 4;
	}
	
	message WriteRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
		bytes data = 4;
	}
	
	message ReadByteDataRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
		int32 register = 4;
	}
	
	message WriteByteDataRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
		int32 register = 4;
		int32 data = 5;
	}
	
	message ReadI2CBlockDataRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
		int32 register = 4;
		int32 subAddressSize = 5;
		int32 length = 6;
	}
	
	message WriteI2CBlockDataRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
		int32 register = 4;
		int32 subAddressSize = 5;
		bytes data = 6;
	}
	
	message CloseRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 address = 3;
	}
	
	message ReadByteResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		int32 data = 4;
	}
	
	message ReadResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		bytes data = 4;
	}
}

message Spi {
	enum ClockMode {
		MODE_0 = 0;
		MODE_1 = 1;
		MODE_2 = 2;
		MODE_3 = 3;
	}
	
	message OpenRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 chipSelect = 3;
		int32 frequency = 4;
		ClockMode clockMode = 5;
		bool lsbFirst = 6;
	}
	
	message WriteRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 chipSelect = 3;
		bytes txData = 4;
	}
	
	message WriteAndReadRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 chipSelect = 3;
		bytes txData = 4;
	}
	
	message CloseRequest {
		string correlationId = 1;
		int32 controller = 2;
		int32 chipSelect = 3;
	}
	
	message SpiResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		bytes rxData = 4;
	}
}

message Serial {
	message OpenRequest {
		string correlationId = 1;
		string deviceName = 2;
		int32 baud = 3;
		int32 dataBits = 4;
		int32 stopBits = 5;
		int32 parity = 6;
		bool readBlocking = 7;
		int32 minReadChars = 8;
		int32 readTimeoutMillis = 9;
	}
	
	message ReadRequest {
		string correlationId = 1;
		string deviceName = 2;
	}
	
	message ReadByteRequest {
		string correlationId = 1;
		string deviceName = 2;
	}
	
	message WriteByteRequest {
		string correlationId = 1;
		string deviceName = 2;
		int32 data = 3;
	}
	
	message ReadBytesRequest {
		string correlationId = 1;
		string deviceName = 2;
		int32 length = 3;
	}
	
	message WriteBytesRequest {
		string correlationId = 1;
		string deviceName = 2;
		bytes data = 3;
	}
	
	message BytesAvailableRequest {
		string correlationId = 1;
		string deviceName = 2;
	}

	message CloseRequest {
		string correlationId = 1;
		string deviceName = 2;
	}
	
	message ReadResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		int32 data = 4;
	}
	
	message ReadByteResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		int32 data = 4;
	}
	
	message ReadBytesResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		bytes data = 4;
	}
	
	message BytesAvailableResponse {
		string correlationId = 1;
		Status status = 2;
		string detail = 3;
		int32 bytesAvailable = 4;
	}
}
